{"ast":null,"code":"var _jsxFileName = \"/Users/magicmars123/Desktop/\\u110C\\u1161\\u11A8\\u110B\\u1165\\u11B8\\u1100\\u1169\\u11BC\\u1100\\u1161\\u11AB.nosync/GGlabsBuild/src/components/Home/AutoSlider/AutoSlider.tsx\",\n  _s = $RefreshSig$();\nimport { useRef } from \"react\";\nimport useInterval from \"@/hooks/useInterval\";\nimport useAutoSlide from \"@/hooks/useAutoSlide\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AutoSlider = _ref => {\n  _s();\n  let {\n    imageList,\n    intersectionStyle = {\n      transform: \"\"\n    },\n    slideStyle,\n    slideRange = 1,\n    interval = 1400,\n    imageRatio,\n    imageWidth\n  } = _ref;\n  const images = useRef([...imageList, ...imageList]);\n  const {\n    style,\n    moveSlide,\n    contentWidth\n  } = useAutoSlide(images.current.length);\n  useInterval(() => {\n    moveSlide(slideRange);\n  }, interval);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      ...style,\n      ...intersectionStyle\n    },\n    className: slideStyle,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full overflow-hidden\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex`,\n        style: style,\n        children: images.current.map((img, index) => {\n          return !Array.isArray(img) ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: contentWidth,\n            className: \"flex-none flex justify-center items-center\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: `${imageRatio[index % imageList.length]} ${imageWidth[index % imageList.length]}`,\n              src: img.image,\n              alt: \"Partners\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 19\n            }, this)\n          }, `PartnersImage${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            style: contentWidth,\n            className: \"flex-none flex flex-col justify-center text-center items-center font-bold text-white text-[clamp(12px,3.3vw,20px)] pad:text-[clamp(20px,1.852vw,24px)] desktop:text-[clamp(24px,1.25vw,30px)]\",\n            children: img.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: item\n              }, `partnerName${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 28\n              }, this);\n            })\n          }, `PartnersImage${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(AutoSlider, \"cIXffcISYyrFQPre9a474/+DZEE=\", false, function () {\n  return [useAutoSlide, useInterval];\n});\n_c = AutoSlider;\nexport default AutoSlider;\nvar _c;\n$RefreshReg$(_c, \"AutoSlider\");","map":{"version":3,"names":["useRef","useInterval","useAutoSlide","AutoSlider","imageList","intersectionStyle","transform","slideStyle","slideRange","interval","imageRatio","imageWidth","images","style","moveSlide","contentWidth","current","length","map","img","index","Array","isArray","image","item"],"sources":["/Users/magicmars123/Desktop/작업공간.nosync/GGlabsBuild/src/components/Home/AutoSlider/AutoSlider.tsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\n\nimport useInterval from \"@/hooks/useInterval\";\nimport useAutoSlide from \"@/hooks/useAutoSlide\";\n\ntype Props = {\n  imageList: (string[] | { image: string })[];\n  intersectionStyle?: { transform: string };\n  slideRange?: number;\n  interval?: number;\n  slideStyle: string;\n  imageRatio: string[];\n  imageWidth: string[];\n};\n\nconst AutoSlider = ({ imageList, intersectionStyle = { transform: \"\"}, slideStyle, slideRange=1, interval=1400, imageRatio, imageWidth }: Props) => {\n  const images = useRef<(string[] | { image: string })[]>([\n    ...imageList,\n    ...imageList,\n  ]);\n  const { style, moveSlide, contentWidth } = useAutoSlide(\n    images.current.length\n  );\n\n  useInterval(() => {\n    moveSlide(slideRange);\n  }, interval);\n\n  return (\n    <div style={{ ...style, ...intersectionStyle }} className={slideStyle}>\n      <div className=\"w-full overflow-hidden\">\n        <div className={`flex`} style={style}>\n          {images.current.map(\n            (img: string[] | { image: string }, index: number): JSX.Element => {\n              return !Array.isArray(img) ? (\n                <div\n                  key={`PartnersImage${index}`}\n                  style={contentWidth}\n                  className=\"flex-none flex justify-center items-center\"\n                >\n                  <img\n                    className={`${\n                      imageRatio[index % imageList.length]\n                    } ${imageWidth[index % imageList.length]}`}\n                    src={img.image}\n                    alt=\"Partners\"\n                  />\n                </div>\n              ) : (\n                <div\n                  key={`PartnersImage${index}`}\n                  style={contentWidth}\n                  className=\"flex-none flex flex-col justify-center text-center items-center font-bold text-white text-[clamp(12px,3.3vw,20px)] pad:text-[clamp(20px,1.852vw,24px)] desktop:text-[clamp(24px,1.25vw,30px)]\"\n                >\n                  {img.map((item, index) => {\n                    return <h3 key={`partnerName${index}`}>{item}</h3>;\n                  })}\n                </div>\n              );\n            }\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AutoSlider;\n"],"mappings":";;AAAA,SAAoBA,MAAM,QAAQ,OAAO;AAEzC,OAAOC,WAAW,MAAM,qBAAqB;AAC7C,OAAOC,YAAY,MAAM,sBAAsB;AAAC;AAYhD,MAAMC,UAAU,GAAG,QAAiI;EAAA;EAAA,IAAhI;IAAEC,SAAS;IAAEC,iBAAiB,GAAG;MAAEC,SAAS,EAAE;IAAE,CAAC;IAAEC,UAAU;IAAEC,UAAU,GAAC,CAAC;IAAEC,QAAQ,GAAC,IAAI;IAAEC,UAAU;IAAEC;EAAkB,CAAC;EAC7I,MAAMC,MAAM,GAAGZ,MAAM,CAAmC,CACtD,GAAGI,SAAS,EACZ,GAAGA,SAAS,CACb,CAAC;EACF,MAAM;IAAES,KAAK;IAAEC,SAAS;IAAEC;EAAa,CAAC,GAAGb,YAAY,CACrDU,MAAM,CAACI,OAAO,CAACC,MAAM,CACtB;EAEDhB,WAAW,CAAC,MAAM;IAChBa,SAAS,CAACN,UAAU,CAAC;EACvB,CAAC,EAAEC,QAAQ,CAAC;EAEZ,oBACE;IAAK,KAAK,EAAE;MAAE,GAAGI,KAAK;MAAE,GAAGR;IAAkB,CAAE;IAAC,SAAS,EAAEE,UAAW;IAAA,uBACpE;MAAK,SAAS,EAAC,wBAAwB;MAAA,uBACrC;QAAK,SAAS,EAAG,MAAM;QAAC,KAAK,EAAEM,KAAM;QAAA,UAClCD,MAAM,CAACI,OAAO,CAACE,GAAG,CACjB,CAACC,GAAiC,EAAEC,KAAa,KAAkB;UACjE,OAAO,CAACC,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,gBACxB;YAEE,KAAK,EAAEJ,YAAa;YACpB,SAAS,EAAC,4CAA4C;YAAA,uBAEtD;cACE,SAAS,EAAG,GACVL,UAAU,CAACU,KAAK,GAAGhB,SAAS,CAACa,MAAM,CACpC,IAAGN,UAAU,CAACS,KAAK,GAAGhB,SAAS,CAACa,MAAM,CAAE,EAAE;cAC3C,GAAG,EAAEE,GAAG,CAACI,KAAM;cACf,GAAG,EAAC;YAAU;cAAA;cAAA;cAAA;YAAA;UACd,GAVI,gBAAeH,KAAM,EAAC;YAAA;YAAA;YAAA;UAAA,QAWxB,gBAEN;YAEE,KAAK,EAAEL,YAAa;YACpB,SAAS,EAAC,+LAA+L;YAAA,UAExMI,GAAG,CAACD,GAAG,CAAC,CAACM,IAAI,EAAEJ,KAAK,KAAK;cACxB,oBAAO;gBAAA,UAAiCI;cAAI,GAA3B,cAAaJ,KAAM,EAAC;gBAAA;gBAAA;gBAAA;cAAA,QAAa;YACpD,CAAC;UAAC,GANI,gBAAeA,KAAM,EAAC;YAAA;YAAA;YAAA;UAAA,QAQ/B;QACH,CAAC;MACF;QAAA;QAAA;QAAA;MAAA;IACG;MAAA;MAAA;MAAA;IAAA;EACF;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAC,GAlDIjB,UAAU;EAAA,QAK6BD,YAAY,EAIvDD,WAAW;AAAA;AAAA,KATPE,UAAU;AAoDhB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}