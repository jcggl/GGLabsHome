{"ast":null,"code":"import { useContext, useLayoutEffect, useState, useRef, useMemo } from 'react';\nimport CookiesContext from './CookiesContext';\nimport { isInBrowser } from './utils';\nexport default function useCookies(dependencies) {\n  var cookies = useContext(CookiesContext);\n  if (!cookies) {\n    throw new Error('Missing <CookiesProvider>');\n  }\n  var initialCookies = cookies.getAll();\n  var _a = useState(initialCookies),\n    allCookies = _a[0],\n    setCookies = _a[1];\n  var previousCookiesRef = useRef(allCookies);\n  if (isInBrowser()) {\n    useLayoutEffect(function () {\n      function onChange() {\n        var newCookies = cookies.getAll();\n        if (shouldUpdate(dependencies || null, newCookies, previousCookiesRef.current)) {\n          setCookies(newCookies);\n        }\n        previousCookiesRef.current = newCookies;\n      }\n      cookies.addChangeListener(onChange);\n      return function () {\n        cookies.removeChangeListener(onChange);\n      };\n    }, [cookies]);\n  }\n  var setCookie = useMemo(function () {\n    return cookies.set.bind(cookies);\n  }, [cookies]);\n  var removeCookie = useMemo(function () {\n    return cookies.remove.bind(cookies);\n  }, [cookies]);\n  return [allCookies, setCookie, removeCookie];\n}\nfunction shouldUpdate(dependencies, newCookies, oldCookies) {\n  if (!dependencies) {\n    return true;\n  }\n  for (var _i = 0, dependencies_1 = dependencies; _i < dependencies_1.length; _i++) {\n    var dependency = dependencies_1[_i];\n    if (newCookies[dependency] !== oldCookies[dependency]) {\n      return true;\n    }\n  }\n  return false;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}