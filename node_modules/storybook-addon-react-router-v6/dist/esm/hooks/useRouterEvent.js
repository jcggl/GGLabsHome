function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { EVENTS } from "../constants";
import { useLocation, useNavigationType, useParams, useSearchParams } from "react-router-dom";
import { useCurrentUrl } from "./useCurrentUrl";
import { useDeepRouteMatches } from "./useDeepRouteMatches";
export var useRouterEvent = function useRouterEvent() {
  var location = useLocation();
  var params = useParams();

  var _useSearchParams = useSearchParams(),
      _useSearchParams2 = _slicedToArray(_useSearchParams, 1),
      search = _useSearchParams2[0];

  var navigationType = useNavigationType();
  var matches = useDeepRouteMatches();
  var searchParams = {};
  search.forEach(function (value, key) {
    searchParams[key] = value;
  });
  var currentUrl = useCurrentUrl();
  var matchesData = matches.map(function (routeMatch) {
    return [routeMatch.route.path, routeMatch.params];
  });
  return function (eventName) {
    switch (eventName) {
      case EVENTS.STORY_LOADED:
        {
          var eventData = {
            url: currentUrl,
            path: location.pathname,
            routeParams: params,
            searchParams: searchParams,
            routeMatches: matchesData,
            hash: location.hash,
            routeState: location.state
          };
          return {
            key: location.key,
            type: EVENTS.STORY_LOADED,
            data: eventData
          };
        }

      case EVENTS.NAVIGATION:
        {
          var _eventData = {
            url: currentUrl,
            path: location.pathname,
            routeParams: params,
            searchParams: searchParams,
            hash: location.hash,
            routeState: location.state,
            routeMatches: matchesData,
            navigationType: navigationType
          };
          return {
            key: location.key,
            type: EVENTS.NAVIGATION,
            data: _eventData
          };
        }

      case EVENTS.ROUTE_MATCHES:
        {
          return {
            key: "matches-".concat(location.key, "-").concat(matchesData.length),
            type: EVENTS.ROUTE_MATCHES,
            data: {
              matches: matchesData
            }
          };
        }
    }
  };
};