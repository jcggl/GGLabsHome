var _humanReadableEventNa;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Fragment } from "react";
import { styled } from '@storybook/theming';
import { EVENTS } from "../constants";
import { ActionBar, ScrollArea } from "@storybook/components";
import { RouterEventDisplayWrapper } from "./RouterEventDisplayWrapper";
import { ThemedInspector } from "./ThemedInspector";
import { InspectorContainer } from "./InspectorContainer";
export var PatchedScrollArea = ScrollArea;
export var PanelContent = function PanelContent(_ref) {
  var navigationEvents = _ref.navigationEvents,
      onClear = _ref.onClear;
  return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Wrapper, {
    title: "reactRouterLogger"
  }, navigationEvents.map(function (event) {
    return /*#__PURE__*/React.createElement(RouterEventDisplayWrapper, {
      key: event.key
    }, /*#__PURE__*/React.createElement(InspectorContainer, null, /*#__PURE__*/React.createElement(ThemedInspector, {
      name: humanReadableEventNames[event.type],
      data: event.data,
      showNonenumerable: false,
      sortObjectKeys: false,
      expandPaths: ['$.routeParams', '$.searchParams', '$.routeMatches.*', '$.routeMatches.*.*', '$.matches', '$.matches.*', '$.matches.*.*']
    })));
  })), /*#__PURE__*/React.createElement(ActionBar, {
    actionItems: [{
      title: 'Clear',
      onClick: onClear
    }]
  }));
};
export var humanReadableEventNames = (_humanReadableEventNa = {}, _defineProperty(_humanReadableEventNa, EVENTS.NAVIGATION, "Navigate to"), _defineProperty(_humanReadableEventNa, EVENTS.STORY_LOADED, "Story rendered at"), _defineProperty(_humanReadableEventNa, EVENTS.ROUTE_MATCHES, "New route matches"), _humanReadableEventNa);
export var Wrapper = styled(function (_ref2) {
  var children = _ref2.children,
      className = _ref2.className;
  return /*#__PURE__*/React.createElement(PatchedScrollArea, {
    horizontal: true,
    vertical: true,
    className: className
  }, children);
})({
  margin: 0,
  padding: '10px 5px 20px'
});
Wrapper.displayName = "Wrapper";