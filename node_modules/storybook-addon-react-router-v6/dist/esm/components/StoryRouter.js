function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useState } from "react";
import { generatePath, MemoryRouter, Route, Routes } from "react-router-dom";
import { RouterLogger } from "./RouterLogger";
import { DeepRouteMatchesContext } from "../contexts/DeepRouteMatches";
import { UNSAFE_RouteContext } from "react-router";
export var StoryRouter = function StoryRouter(_ref) {
  var _UNSAFE_RouteContext$;

  var children = _ref.children,
      userBrowserPath = _ref.browserPath,
      routePath = _ref.routePath,
      routeParams = _ref.routeParams,
      searchParams = _ref.searchParams,
      routeState = _ref.routeState,
      outlet = _ref.outlet;
  var generatedPath = generatePath(routePath, routeParams);
  var queryString = new URLSearchParams(searchParams).toString();
  var search = queryString.length > 0 ? "?".concat(queryString) : '';

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      deepRouteMatches = _useState2[0],
      setDeepRouteMatches = _useState2[1];

  // @ts-ignore
  UNSAFE_RouteContext.Provider._context = new Proxy((_UNSAFE_RouteContext$ = UNSAFE_RouteContext.Provider._context) !== null && _UNSAFE_RouteContext$ !== void 0 ? _UNSAFE_RouteContext$ : {}, {
    set: function set(target, p, v) {
      if (p === '_currentValue') {
        setDeepRouteMatches(function (currentMatches) {
          if (v.matches.length > currentMatches.length) {
            return v.matches;
          }

          return currentMatches;
        });
      }

      return Reflect.set(target, p, v);
    }
  });
  var initialEntry = {
    search: search,
    state: routeState
  };
  if (userBrowserPath !== undefined) initialEntry['pathname'] = userBrowserPath;
  if (userBrowserPath === undefined && generatedPath !== '') initialEntry['pathname'] = generatedPath;
  return /*#__PURE__*/React.createElement(DeepRouteMatchesContext.Provider, {
    value: deepRouteMatches
  }, /*#__PURE__*/React.createElement(MemoryRouter, {
    initialEntries: [initialEntry]
  }, /*#__PURE__*/React.createElement(Routes, null, /*#__PURE__*/React.createElement(Route, {
    path: routePath,
    element: /*#__PURE__*/React.createElement(RouterLogger, null, children)
  }, outlet && /*#__PURE__*/React.createElement(Route, {
    index: true,
    element: outlet
  })))));
};